Hereâ€™s how you can set up and use Flask-Migrate to handle migrations:

1. Install Flask-Migrate
First, install Flask-Migrate by running the following command:

bash
Copy code
pip install flask-migrate
2. Set Up Flask-Migrate in Your Application
In your app.py file, import and initialize Flask-Migrate like this:

python
Copy code
from flask import Flask
from flask_migrate import Migrate
from extensions import db, bcrypt
from config import Config
from routes.user_routes import user_routes

# Initialize the app and extensions
app = Flask(__name__)
app.config.from_object(Config)

# Initialize Migrate
migrate = Migrate(app, db)

# Initialize Extensions
db.init_app(app)
bcrypt.init_app(app)

# Register Blueprints
app.register_blueprint(user_routes, url_prefix='/users')

if __name__ == "__main__":
    app.run(debug=True)
3. Initialize Alembic
In your project directory, run the following command to set up the Alembic migration repository:

bash
Copy code
flask db init
This will create a new migrations/ folder where your migration scripts will be stored.

4. Create a Migration Script
Whenever you make changes to your database models (e.g., adding a new field), you need to generate a migration script. You can do this by running:

bash
Copy code
flask db migrate -m "Added email to user model"
This will create a new migration script in the migrations/versions/ directory.

5. Apply the Migration
To apply the migration (i.e., update the actual database schema), run:

bash
Copy code
flask db upgrade
This will apply the migration and update your database to match the models.

6. Optional: Downgrade the Migration
If you need to undo a migration, you can downgrade to the previous migration state by running:

bash
Copy code
flask db downgrade
Summary of Workflow
Define your models (e.g., adding a new field).
Run flask db migrate -m "message" to generate a migration script.
Run flask db upgrade to apply the migration.
By using Flask-Migrate and Alembic, you can easily manage changes to your database schema over time without having to manually update the database structure.